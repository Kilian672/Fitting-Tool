# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'fitting_tool_ui.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import os
import copy
import sys
import pandas as pd
import numpy as np
from collections import OrderedDict
from PyQt5.QtCore import Qt
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from FigureCanvas import SingleCanvas
from matplotlib.backends.backend_qt5agg import NavigationToolbar2QT as NavigationToolbar
from thread_handling_classes import Worker
from fitting_tool_logic import Get_Model, Get_Data, Fit, NoSusException


class Ui_MainWindow(object):
    
    # Autogenerated by the QtDesigners
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(952, 798)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(106, 212, 159))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 85, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(56, 113, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 212, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(106, 212, 159))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 85, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(56, 113, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 212, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 85, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(106, 212, 159))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 85, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(56, 113, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 85, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 85, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        MainWindow.setPalette(palette)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(106, 212, 159))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 85, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(56, 113, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 212, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(106, 212, 159))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 85, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(56, 113, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(170, 212, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.ToolTipText, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 85, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.WindowText, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(127, 255, 191))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(106, 212, 159))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Midlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 85, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Dark, brush)
        brush = QtGui.QBrush(QtGui.QColor(56, 113, 84))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Mid, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 85, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Text, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.BrightText, brush)
        brush = QtGui.QBrush(QtGui.QColor(42, 85, 63))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ButtonText, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Shadow, brush)
        brush = QtGui.QBrush(QtGui.QColor(85, 170, 127))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 220))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.ToolTipText, brush)
        self.centralwidget.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(14)
        self.centralwidget.setFont(font)
        self.centralwidget.setAutoFillBackground(False)
        self.centralwidget.setObjectName("centralwidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.centralwidget)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.tabs = QtWidgets.QTabWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.tabs.sizePolicy().hasHeightForWidth())
        self.tabs.setSizePolicy(sizePolicy)
        self.tabs.setAutoFillBackground(False)
        self.tabs.setObjectName("tabs")
        self.upload_tab = QtWidgets.QWidget()
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.upload_tab.sizePolicy().hasHeightForWidth())
        self.upload_tab.setSizePolicy(sizePolicy)
        self.upload_tab.setObjectName("upload_tab")
        self.gridLayout = QtWidgets.QGridLayout(self.upload_tab)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 1, 4, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 1, 0, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem2, 0, 1, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem3, 2, 1, 1, 1)
        self.scrollArea = QtWidgets.QScrollArea(self.upload_tab)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents = QtWidgets.QWidget()
        self.scrollAreaWidgetContents.setGeometry(QtCore.QRect(0, 0, 719, 407))
        self.scrollAreaWidgetContents.setObjectName("scrollAreaWidgetContents")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem4, 2, 0, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem5, 2, 5, 1, 1)
        self.row_population_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.row_population_label.sizePolicy().hasHeightForWidth())
        self.row_population_label.setSizePolicy(sizePolicy)
        self.row_population_label.setObjectName("row_population_label")
        self.gridLayout_2.addWidget(self.row_population_label, 1, 0, 1, 6)
        self.columns_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.columns_label.setObjectName("columns_label")
        self.gridLayout_2.addWidget(self.columns_label, 5, 0, 1, 6)
        self.end_row_textfield = QtWidgets.QSpinBox(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.end_row_textfield.sizePolicy().hasHeightForWidth())
        self.end_row_textfield.setSizePolicy(sizePolicy)
        self.end_row_textfield.setMinimum(2)
        self.end_row_textfield.setMaximum(1000000000)
        self.end_row_textfield.setProperty("value", 200)
        self.end_row_textfield.setObjectName("end_row_textfield")
        self.gridLayout_2.addWidget(self.end_row_textfield, 3, 4, 1, 1)
        self.population_textfield = QtWidgets.QSpinBox(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.population_textfield.sizePolicy().hasHeightForWidth())
        self.population_textfield.setSizePolicy(sizePolicy)
        self.population_textfield.setMinimum(1)
        self.population_textfield.setMaximum(1000000000)
        self.population_textfield.setObjectName("population_textfield")
        self.gridLayout_2.addWidget(self.population_textfield, 4, 4, 1, 1)
        self.start_row_textfield = QtWidgets.QSpinBox(self.scrollAreaWidgetContents)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.start_row_textfield.sizePolicy().hasHeightForWidth())
        self.start_row_textfield.setSizePolicy(sizePolicy)
        self.start_row_textfield.setMinimum(1)
        self.start_row_textfield.setMaximum(1000000000)
        self.start_row_textfield.setObjectName("start_row_textfield")
        self.gridLayout_2.addWidget(self.start_row_textfield, 2, 4, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem6, 2, 3, 1, 1)
        self.start_row_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.start_row_label.setObjectName("start_row_label")
        self.gridLayout_2.addWidget(self.start_row_label, 2, 1, 1, 2)
        self.end_row_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.end_row_label.setObjectName("end_row_label")
        self.gridLayout_2.addWidget(self.end_row_label, 3, 1, 1, 2)
        self.population_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
        self.population_label.setObjectName("population_label")
        self.gridLayout_2.addWidget(self.population_label, 4, 1, 1, 2)
        self.show_header_checkBox = QtWidgets.QCheckBox(self.scrollAreaWidgetContents)
        self.show_header_checkBox.setObjectName("show_header_checkBox")
        self.gridLayout_2.addWidget(self.show_header_checkBox, 0, 0, 1, 6)
        self.gridLayout_2.setColumnStretch(4, 2)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents)
        self.gridLayout.addWidget(self.scrollArea, 5, 0, 1, 5)
        self.upload_data_label = QtWidgets.QLabel(self.upload_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.upload_data_label.sizePolicy().hasHeightForWidth())
        self.upload_data_label.setSizePolicy(sizePolicy)
        self.upload_data_label.setText("")
        self.upload_data_label.setObjectName("upload_data_label")
        self.gridLayout.addWidget(self.upload_data_label, 3, 3, 1, 1)
        self.upload_data_button = QtWidgets.QPushButton(self.upload_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.upload_data_button.sizePolicy().hasHeightForWidth())
        self.upload_data_button.setSizePolicy(sizePolicy)
        self.upload_data_button.setMaximumSize(QtCore.QSize(16777215, 50))
        self.upload_data_button.setObjectName("upload_data_button")
        self.gridLayout.addWidget(self.upload_data_button, 3, 1, 1, 1)
        self.upload_model_label = QtWidgets.QLabel(self.upload_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.upload_model_label.sizePolicy().hasHeightForWidth())
        self.upload_model_label.setSizePolicy(sizePolicy)
        self.upload_model_label.setText("")
        self.upload_model_label.setObjectName("upload_model_label")
        self.gridLayout.addWidget(self.upload_model_label, 1, 3, 1, 1)
        self.upload_model_button = QtWidgets.QPushButton(self.upload_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.upload_model_button.sizePolicy().hasHeightForWidth())
        self.upload_model_button.setSizePolicy(sizePolicy)
        self.upload_model_button.setMaximumSize(QtCore.QSize(16777215, 50))
        self.upload_model_button.setObjectName("upload_model_button")
        self.gridLayout.addWidget(self.upload_model_button, 1, 1, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem7, 4, 1, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem8, 1, 2, 1, 1)
        self.gridLayout.setColumnStretch(1, 1)
        self.gridLayout.setColumnStretch(4, 2)
        self.gridLayout.setRowStretch(1, 1)
        self.gridLayout.setRowStretch(3, 1)
        self.gridLayout.setRowStretch(5, 4)
        self.tabs.addTab(self.upload_tab, "")
        self.fitting_tab = QtWidgets.QWidget()
        self.fitting_tab.setObjectName("fitting_tab")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.fitting_tab)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.step_label = QtWidgets.QLabel(self.fitting_tab)
        self.step_label.setObjectName("step_label")
        self.gridLayout_3.addWidget(self.step_label, 3, 1, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem9, 1, 5, 1, 1)
        spacerItem10 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_3.addItem(spacerItem10, 11, 4, 1, 1)
        self.start_label = QtWidgets.QLabel(self.fitting_tab)
        self.start_label.setObjectName("start_label")
        self.gridLayout_3.addWidget(self.start_label, 1, 1, 1, 1)
        self.show_button = QtWidgets.QPushButton(self.fitting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.show_button.sizePolicy().hasHeightForWidth())
        self.show_button.setSizePolicy(sizePolicy)
        self.show_button.setMaximumSize(QtCore.QSize(16777215, 50))
        self.show_button.setAutoFillBackground(False)
        self.show_button.setObjectName("show_button")
        self.gridLayout_3.addWidget(self.show_button, 10, 4, 1, 1)
        self.fit_button = QtWidgets.QPushButton(self.fitting_tab)
        self.fit_button.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fit_button.sizePolicy().hasHeightForWidth())
        self.fit_button.setSizePolicy(sizePolicy)
        self.fit_button.setMaximumSize(QtCore.QSize(16777215, 50))
        self.fit_button.setObjectName("fit_button")
        self.gridLayout_3.addWidget(self.fit_button, 5, 4, 1, 1)
        spacerItem11 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem11, 1, 0, 1, 1)
        self.statistic_radiobutton = QtWidgets.QRadioButton(self.fitting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.statistic_radiobutton.sizePolicy().hasHeightForWidth())
        self.statistic_radiobutton.setSizePolicy(sizePolicy)
        self.statistic_radiobutton.setAutoFillBackground(False)
        self.statistic_radiobutton.setObjectName("statistic_radiobutton")
        self.gridLayout_3.addWidget(self.statistic_radiobutton, 8, 1, 1, 1)
        self.fit_radiobutton = QtWidgets.QRadioButton(self.fitting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fit_radiobutton.sizePolicy().hasHeightForWidth())
        self.fit_radiobutton.setSizePolicy(sizePolicy)
        self.fit_radiobutton.setAutoFillBackground(False)
        self.fit_radiobutton.setObjectName("fit_radiobutton")
        self.gridLayout_3.addWidget(self.fit_radiobutton, 7, 1, 1, 1)
        self.data_radiobutton = QtWidgets.QRadioButton(self.fitting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.data_radiobutton.sizePolicy().hasHeightForWidth())
        self.data_radiobutton.setSizePolicy(sizePolicy)
        self.data_radiobutton.setAutoFillBackground(False)
        self.data_radiobutton.setObjectName("data_radiobutton")
        self.gridLayout_3.addWidget(self.data_radiobutton, 9, 1, 1, 1)
        spacerItem12 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem12, 10, 0, 1, 4)
        spacerItem13 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_3.addItem(spacerItem13, 6, 4, 1, 1)
        spacerItem14 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem14, 1, 2, 1, 1)
        spacerItem15 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_3.addItem(spacerItem15, 2, 3, 1, 2)
        spacerItem16 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_3.addItem(spacerItem16, 4, 3, 1, 2)
        self.start_textfield = QtWidgets.QSpinBox(self.fitting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.start_textfield.sizePolicy().hasHeightForWidth())
        self.start_textfield.setSizePolicy(sizePolicy)
        self.start_textfield.setMaximum(1000000000)
        self.start_textfield.setProperty("value", 0)
        self.start_textfield.setObjectName("start_textfield")
        self.gridLayout_3.addWidget(self.start_textfield, 1, 3, 1, 2)
        self.step_textfield = QtWidgets.QSpinBox(self.fitting_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.step_textfield.sizePolicy().hasHeightForWidth())
        self.step_textfield.setSizePolicy(sizePolicy)
        self.step_textfield.setMinimum(1)
        self.step_textfield.setMaximum(1000000000)
        self.step_textfield.setProperty("value", 200)
        self.step_textfield.setObjectName("step_textfield")
        self.gridLayout_3.addWidget(self.step_textfield, 3, 3, 1, 2)
        spacerItem17 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_3.addItem(spacerItem17, 0, 3, 1, 2)
        spacerItem18 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem18, 5, 0, 1, 4)
        self.gridLayout_3.setColumnStretch(3, 4)
        self.gridLayout_3.setColumnStretch(4, 4)
        self.tabs.addTab(self.fitting_tab, "")
        self.settings_tab = QtWidgets.QWidget()
        self.settings_tab.setObjectName("settings_tab")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.settings_tab)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.interventions_spinBox = QtWidgets.QSpinBox(self.settings_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.interventions_spinBox.sizePolicy().hasHeightForWidth())
        self.interventions_spinBox.setSizePolicy(sizePolicy)
        self.interventions_spinBox.setMaximumSize(QtCore.QSize(16777215, 50))
        self.interventions_spinBox.setMaximum(100)
        self.interventions_spinBox.setObjectName("interventions_spinBox")
        self.gridLayout_4.addWidget(self.interventions_spinBox, 11, 4, 1, 2)
        spacerItem19 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_4.addItem(spacerItem19, 14, 2, 1, 1)
        self.maxEvals_spinBox = QtWidgets.QSpinBox(self.settings_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.maxEvals_spinBox.sizePolicy().hasHeightForWidth())
        self.maxEvals_spinBox.setSizePolicy(sizePolicy)
        self.maxEvals_spinBox.setMaximumSize(QtCore.QSize(16777215, 50))
        self.maxEvals_spinBox.setMinimum(1)
        self.maxEvals_spinBox.setMaximum(1000000000)
        self.maxEvals_spinBox.setProperty("value", 10000)
        self.maxEvals_spinBox.setObjectName("maxEvals_spinBox")
        self.gridLayout_4.addWidget(self.maxEvals_spinBox, 9, 4, 1, 2)
        self.lower_bound_spinBox = QtWidgets.QSpinBox(self.settings_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lower_bound_spinBox.sizePolicy().hasHeightForWidth())
        self.lower_bound_spinBox.setSizePolicy(sizePolicy)
        self.lower_bound_spinBox.setMaximum(10000)
        self.lower_bound_spinBox.setObjectName("lower_bound_spinBox")
        self.gridLayout_4.addWidget(self.lower_bound_spinBox, 15, 4, 1, 2)
        self.upper_bound_label = QtWidgets.QLabel(self.settings_tab)
        self.upper_bound_label.setObjectName("upper_bound_label")
        self.gridLayout_4.addWidget(self.upper_bound_label, 13, 2, 1, 1)
        spacerItem20 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_4.addItem(spacerItem20, 8, 2, 1, 1)
        self.fittingalg_label = QtWidgets.QLabel(self.settings_tab)
        self.fittingalg_label.setObjectName("fittingalg_label")
        self.gridLayout_4.addWidget(self.fittingalg_label, 5, 2, 1, 1)
        spacerItem21 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_4.addItem(spacerItem21, 16, 2, 1, 1)
        spacerItem22 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem22, 7, 1, 1, 1)
        spacerItem23 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem23, 2, 3, 1, 1)
        spacerItem24 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem24, 2, 6, 1, 1)
        spacerItem25 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem25, 5, 1, 1, 1)
        spacerItem26 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_4.addItem(spacerItem26, 12, 2, 1, 1)
        spacerItem27 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem27, 11, 1, 1, 1)
        spacerItem28 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem28, 2, 1, 1, 1)
        spacerItem29 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_4.addItem(spacerItem29, 6, 2, 1, 1)
        spacerItem30 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_4.addItem(spacerItem30, 0, 2, 1, 1)
        spacerItem31 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_4.addItem(spacerItem31, 3, 2, 1, 1)
        self.scale_label = QtWidgets.QLabel(self.settings_tab)
        self.scale_label.setObjectName("scale_label")
        self.gridLayout_4.addWidget(self.scale_label, 2, 2, 1, 1)
        self.logarithmic_radiobutton = QtWidgets.QRadioButton(self.settings_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.logarithmic_radiobutton.sizePolicy().hasHeightForWidth())
        self.logarithmic_radiobutton.setSizePolicy(sizePolicy)
        self.logarithmic_radiobutton.setObjectName("logarithmic_radiobutton")
        self.gridLayout_4.addWidget(self.logarithmic_radiobutton, 2, 5, 1, 1)
        self.fittingalgs_comboBox = QtWidgets.QComboBox(self.settings_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.fittingalgs_comboBox.sizePolicy().hasHeightForWidth())
        self.fittingalgs_comboBox.setSizePolicy(sizePolicy)
        self.fittingalgs_comboBox.setMaximumSize(QtCore.QSize(16777215, 50))
        self.fittingalgs_comboBox.setObjectName("fittingalgs_comboBox")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.fittingalgs_comboBox.addItem("")
        self.gridLayout_4.addWidget(self.fittingalgs_comboBox, 5, 4, 1, 2)
        self.linear_radiobutton = QtWidgets.QRadioButton(self.settings_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.linear_radiobutton.sizePolicy().hasHeightForWidth())
        self.linear_radiobutton.setSizePolicy(sizePolicy)
        self.linear_radiobutton.setChecked(True)
        self.linear_radiobutton.setObjectName("linear_radiobutton")
        self.gridLayout_4.addWidget(self.linear_radiobutton, 2, 4, 1, 1)
        self.attempts_label = QtWidgets.QLabel(self.settings_tab)
        self.attempts_label.setObjectName("attempts_label")
        self.gridLayout_4.addWidget(self.attempts_label, 7, 2, 1, 1)
        spacerItem32 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_4.addItem(spacerItem32, 10, 2, 1, 1)
        self.interventions_label = QtWidgets.QLabel(self.settings_tab)
        self.interventions_label.setObjectName("interventions_label")
        self.gridLayout_4.addWidget(self.interventions_label, 11, 2, 1, 1)
        self.attempts_spinBox = QtWidgets.QSpinBox(self.settings_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.attempts_spinBox.sizePolicy().hasHeightForWidth())
        self.attempts_spinBox.setSizePolicy(sizePolicy)
        self.attempts_spinBox.setMaximumSize(QtCore.QSize(16777215, 50))
        self.attempts_spinBox.setMinimum(1)
        self.attempts_spinBox.setMaximum(10000)
        self.attempts_spinBox.setProperty("value", 1)
        self.attempts_spinBox.setObjectName("attempts_spinBox")
        self.gridLayout_4.addWidget(self.attempts_spinBox, 7, 4, 1, 2)
        self.fitting_label = QtWidgets.QLabel(self.settings_tab)
        self.fitting_label.setObjectName("fitting_label")
        self.gridLayout_4.addWidget(self.fitting_label, 4, 1, 1, 1)
        self.maxEvals_label = QtWidgets.QLabel(self.settings_tab)
        self.maxEvals_label.setObjectName("maxEvals_label")
        self.gridLayout_4.addWidget(self.maxEvals_label, 9, 2, 1, 1)
        spacerItem33 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem33, 1, 0, 1, 1)
        self.lower_bound_label = QtWidgets.QLabel(self.settings_tab)
        self.lower_bound_label.setObjectName("lower_bound_label")
        self.gridLayout_4.addWidget(self.lower_bound_label, 15, 2, 1, 1)
        self.gen_set_label = QtWidgets.QLabel(self.settings_tab)
        self.gen_set_label.setObjectName("gen_set_label")
        self.gridLayout_4.addWidget(self.gen_set_label, 1, 1, 1, 1)
        self.upper_bound_spinBox = QtWidgets.QSpinBox(self.settings_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.upper_bound_spinBox.sizePolicy().hasHeightForWidth())
        self.upper_bound_spinBox.setSizePolicy(sizePolicy)
        self.upper_bound_spinBox.setMaximumSize(QtCore.QSize(16777215, 50))
        self.upper_bound_spinBox.setMinimum(1)
        self.upper_bound_spinBox.setMaximum(10000)
        self.upper_bound_spinBox.setObjectName("upper_bound_spinBox")
        self.gridLayout_4.addWidget(self.upper_bound_spinBox, 13, 4, 1, 2)
        self.gridLayout_4.setColumnStretch(0, 2)
        self.gridLayout_4.setColumnStretch(4, 6)
        self.gridLayout_4.setColumnStretch(6, 2)
        self.tabs.addTab(self.settings_tab, "")
        self.edit_tab = QtWidgets.QWidget()
        self.edit_tab.setObjectName("edit_tab")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.edit_tab)
        self.gridLayout_5.setObjectName("gridLayout_5")
        spacerItem34 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem34, 1, 2, 1, 1)
        spacerItem35 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_5.addItem(spacerItem35, 10, 3, 1, 1)
        self.column_or_row_comboBox = QtWidgets.QComboBox(self.edit_tab)
        self.column_or_row_comboBox.setObjectName("column_or_row_comboBox")
        self.column_or_row_comboBox.addItem("")
        self.column_or_row_comboBox.addItem("")
        self.gridLayout_5.addWidget(self.column_or_row_comboBox, 1, 1, 1, 1)
        spacerItem36 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem36, 1, 0, 1, 1)
        spacerItem37 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_5.addItem(spacerItem37, 0, 3, 1, 1)
        self.start_add_column_spinBox = QtWidgets.QSpinBox(self.edit_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.start_add_column_spinBox.sizePolicy().hasHeightForWidth())
        self.start_add_column_spinBox.setSizePolicy(sizePolicy)
        self.start_add_column_spinBox.setMinimum(1)
        self.start_add_column_spinBox.setMaximum(1000000000)
        self.start_add_column_spinBox.setObjectName("start_add_column_spinBox")
        self.gridLayout_5.addWidget(self.start_add_column_spinBox, 3, 3, 1, 2)
        self.name_column_lineEdit = QtWidgets.QLineEdit(self.edit_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.name_column_lineEdit.sizePolicy().hasHeightForWidth())
        self.name_column_lineEdit.setSizePolicy(sizePolicy)
        self.name_column_lineEdit.setObjectName("name_column_lineEdit")
        self.gridLayout_5.addWidget(self.name_column_lineEdit, 7, 3, 1, 2)
        self.step_add_column_spinBox = QtWidgets.QSpinBox(self.edit_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.step_add_column_spinBox.sizePolicy().hasHeightForWidth())
        self.step_add_column_spinBox.setSizePolicy(sizePolicy)
        self.step_add_column_spinBox.setMinimum(1)
        self.step_add_column_spinBox.setMaximum(1000000000)
        self.step_add_column_spinBox.setObjectName("step_add_column_spinBox")
        self.gridLayout_5.addWidget(self.step_add_column_spinBox, 5, 3, 1, 2)
        self.column_or_row_spinBox = QtWidgets.QSpinBox(self.edit_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.column_or_row_spinBox.sizePolicy().hasHeightForWidth())
        self.column_or_row_spinBox.setSizePolicy(sizePolicy)
        self.column_or_row_spinBox.setMinimum(1)
        self.column_or_row_spinBox.setMaximum(1000000000)
        self.column_or_row_spinBox.setObjectName("column_or_row_spinBox")
        self.gridLayout_5.addWidget(self.column_or_row_spinBox, 1, 3, 1, 2)
        self.add_column_button = QtWidgets.QPushButton(self.edit_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.add_column_button.sizePolicy().hasHeightForWidth())
        self.add_column_button.setSizePolicy(sizePolicy)
        self.add_column_button.setMinimumSize(QtCore.QSize(0, 50))
        self.add_column_button.setMaximumSize(QtCore.QSize(16777215, 50))
        self.add_column_button.setObjectName("add_column_button")
        self.gridLayout_5.addWidget(self.add_column_button, 9, 4, 1, 1)
        self.start_add_column_label = QtWidgets.QLabel(self.edit_tab)
        self.start_add_column_label.setObjectName("start_add_column_label")
        self.gridLayout_5.addWidget(self.start_add_column_label, 3, 1, 1, 1)
        self.step_add_column_label = QtWidgets.QLabel(self.edit_tab)
        self.step_add_column_label.setObjectName("step_add_column_label")
        self.gridLayout_5.addWidget(self.step_add_column_label, 5, 1, 1, 1)
        spacerItem38 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_5.addItem(spacerItem38, 6, 3, 1, 1)
        spacerItem39 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_5.addItem(spacerItem39, 2, 3, 1, 1)
        spacerItem40 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_5.addItem(spacerItem40, 4, 3, 1, 1)
        self.name_column_label = QtWidgets.QLabel(self.edit_tab)
        self.name_column_label.setObjectName("name_column_label")
        self.gridLayout_5.addWidget(self.name_column_label, 7, 1, 1, 1)
        spacerItem41 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_5.addItem(spacerItem41, 8, 3, 1, 1)
        spacerItem42 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_5.addItem(spacerItem42, 1, 5, 1, 1)
        self.download_button = QtWidgets.QPushButton(self.edit_tab)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Preferred)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.download_button.sizePolicy().hasHeightForWidth())
        self.download_button.setSizePolicy(sizePolicy)
        self.download_button.setObjectName("download_button")
        self.gridLayout_5.addWidget(self.download_button, 9, 3, 1, 1)
        self.gridLayout_5.setColumnStretch(1, 1)
        self.gridLayout_5.setColumnStretch(3, 2)
        self.gridLayout_5.setColumnStretch(4, 2)
        self.gridLayout_5.setRowStretch(10, 6)
        self.tabs.addTab(self.edit_tab, "")
        self.horizontalLayout.addWidget(self.tabs)
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        ###################### changed name of Frame-Layout #######################################
        self.framelayout = QtWidgets.QVBoxLayout(self.frame)
        self.framelayout.setObjectName("verticalLayout")
        self.horizontalLayout.addWidget(self.frame)
        ###########################################################################################
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 952, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        self.tabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.custom_setup()

    def custom_setup(self): 

        # Class variables
        self.current_model = None
        self.current_data = None
        self.read_data_file = {"Columns": {}, "start_row": 1, "end_row": 100 ,"population": 1}
        self.fitted_data = None
        self.data_var_time = None
        self.interventions = None
        
        # Textfields and labels used to get the right columns are stored in this list. 
        self.column_textfield_label_list = []
        
        # Custom data-file
        self.custom_data_file = pd.DataFrame()
        self.custom_data_file_dict = {}
        
        # Add functionality to buttons
        self.upload_model_button.clicked.connect(self.upload_model)
        self.upload_data_button.clicked.connect(self.upload_data)
        self.fit_button.clicked.connect(self.start_fitting_thread)
        self.show_button.clicked.connect(self.show)
        self.tabs.currentChanged.connect(self.change_tab)
        self.add_column_button.clicked.connect(self.add_column)
        self.download_button.clicked.connect(self.download_custom_file)

        # Setup threadpool for heavy calculations in function "self.start_fitting_thread"
        self.threadpool = QtCore.QThreadPool()

    def change_tab(self): 
        
        # Delete every object displayed at the right side of the GUI.
        self.clear_frame()
        # If we change to "fitting_tab" we want to display whether the fitting algorithm is currently working or not.
        # In case the algorithm is not working we want to show one of the different options (Fit/Statistic/Data).
        if self.tabs.currentWidget().objectName() == "fitting_tab": 
            if not self.fit_button.isEnabled():
                message_label = QtWidgets.QLabel(self.frame)
                message_label.setText("Calculating! Please wait.")
                self.framelayout.addWidget(message_label) 
            else: 
                self.show()
        # If we change to "edit_tab" we want to show all the colums, that the user has uploaded for the custom data-file so far. 
        if self.tabs.currentWidget().objectName() == "edit_tab":
            for column_name in self.custom_data_file_dict.keys(): 
                self.draw_custom_data_file_columns(column_name)

    def finished_fit(self, data):
        # Store the solution of the fit in the corresponding variables.
        try: 
            self.interventions, self.fitted_data = data
        except: 
            self.show_error_message("Something went wrong! Please check your input and your files.")
            self.fit_button.setEnabled(True)
            self.show_button.setEnabled(True)
        
        # Reenable "self.fit_button" and "self.show_button" (Disabled during fit).
        self.fit_button.setEnabled(True)
        self.show_button.setEnabled(True)

    def fit_complete(self):
        # Change the message "Calculating! Please wait." to "Done!"
        self.clear_frame() 
        message_label = QtWidgets.QLabel(self.frame)
        message_label.setText("Done!")
        self.framelayout.addWidget(message_label)  

    def fit_could_not_compute(self): 
        # If for some reason the fit could not be computed, we want to reenable our buttons
        # and display an error-message. 
        self.clear_frame()
        self.interventions, self.fitted_data = None, None
        self.fit_button.setEnabled(True)
        self.show_button.setEnabled(True)
        self.show_error_message("Something went wrong! Please check your input and your files.")

    def start_fitting_thread(self):

        """ This function is responsible for starting the calculations used to fit the model to the data. """
        
        # If the user forgot to upload some data, an error-message will be displayed. 
        if self.current_data is None or self.current_model is None: 
            self.show_error_message("Make sure to upload a model/data file!")
            return 

        # Prepare the GUI such that the user knows, that the calculation has started 
        # and is not able to interupt. 
        self.clear_frame()
        self.fit_button.setEnabled(False)
        self.show_button.setEnabled(False)
        message_label = QtWidgets.QLabel(self.frame)
        message_label.setText("Calculating! Please wait.")
        self.framelayout.addWidget(message_label)


        # Store all the necessary settings to the corresponding variables. 
        start = int(self.start_textfield.value())
        step = int(self.step_textfield.value())
        population = int(self.population_textfield.value())
        fitting_alg = str(self.fittingalgs_comboBox.currentText()) 
        attempts = int(self.attempts_spinBox.value())
        max_evals = int(self.maxEvals_spinBox.value())
        interventions = int(self.interventions_spinBox.value())
        upper_bound = int(self.upper_bound_spinBox.value())
        lower_bound = int(self.lower_bound_spinBox.value())
    
        # Make a copy of our current data in order to work with the copy. 
        current_data_copy = copy.deepcopy(self.current_data)
        self.data_var_time = {}
        
        try: 
            # We need to use only the data from start to step. 
            for comp in current_data_copy: 
                self.data_var_time[comp] = current_data_copy[comp][start:start+step]
        except: 
            self.fit_button.setEnabled(True)
            self.show_button.setEnabled(True)
            self.show_error_message("Something went wrong! Please check your data file.")
            return
        
        # Store all the necessary settings in a dictionary. 
        settings = {"Attempts": attempts, "Max_Evals": max_evals, "Fitting_Algorithm": fitting_alg, 
                            "Upper_Bound": upper_bound, "Lower_Bound": lower_bound, "Interventions": interventions}
        
        
        worker = Worker(Fit, self.current_model, self.data_var_time, population, settings) # Any other args, kwargs are passed to the run function
        worker.signals.result.connect(self.finished_fit)
        worker.signals.finished.connect(self.fit_complete)
        worker.signals.error.connect(self.fit_could_not_compute)
        #worker.signals.progress.connect(self.progress_fn)
        
        # Start fitting thread.
        self.threadpool.start(worker)
        #Fit(self.current_model, self.data_var_time, population, settings)
    def show_error_message(self, message): 
        error_message = QMessageBox()
        error_message.setText(message)
        error_message.setIcon(QMessageBox.Critical)
        error_message.exec_()

    def clear_frame(self): 
        # This function is called every time the right hand side of the GUI has to change. 
        # Before we change the right side, we have to delete everything at first. 
        try: 
            for canvas in self.frame.findChildren(SingleCanvas): 
                canvas.setParent(None)
            for textfield in self.frame.findChildren(QtWidgets.QPlainTextEdit): 
                textfield.setParent(None)
            for label in self.frame.findChildren(QtWidgets.QLabel): 
                label.setParent(None)
            for slider in self.frame.findChildren(QtWidgets.QSlider): 
                slider.setParent(None)
            for toolbar in self.frame.findChildren(NavigationToolbar): 
                toolbar.setParent(None) 
            for frame in self.frame.findChildren(QtWidgets.QFrame): 
                frame.setParent(None)
        except: 
            return

    def show(self):
        
        """ This function is responsible for drawing the charts and statistics."""

        self.clear_frame()

        # If the statistic-radiobutton is checked, we want to read the "result.txt"-file and display
        # the contents of that file. The content has been written to the file during fitting and contains useful
        # information about the fit. 
        if self.statistic_radiobutton.isChecked(): 
            try: 
                with open("result.txt") as f:
                    content = f.read()
                    statistic_textfield = QtWidgets.QPlainTextEdit(self.frame)
                    statistic_textfield.setPlainText(content)
                    self.framelayout.addWidget(statistic_textfield) 
            except: 
                self.show_error_message("result.txt not found!")
                return
            return       
        
        # Check if the necessary data is available. 
        if self.fitted_data is None and self.fit_radiobutton.isChecked(): 
            return
        if self.current_data is None and self.data_radiobutton.isChecked(): 
            return
        if not self.fit_radiobutton.isChecked() and not self.data_radiobutton.isChecked(): 
            return 

        # Make a copy of the currently used fitting-compartments.
        comps_to_fit = self.current_model["Compartments_to_Fit"]
        
        # Check if the user wants to use log/linear scale.
        log_scale = False
        if self.linear_radiobutton.isChecked(): 
            log_scale = False
        if self.logarithmic_radiobutton.isChecked(): 
            log_scale = True
        
        # Draw slider to switch between compartements.
        slider = QtWidgets.QSlider(Qt.Orientation.Horizontal, self.frame)
        self.framelayout.addWidget(slider)
        slider.setMaximum(len(comps_to_fit))
        slider.setMinimum(1)
        slider.setTickPosition(QtWidgets.QSlider.TickPosition.TicksBelow)
    
        try:   
            # If the fit-radiobutton is checked, we want to display the curve fitted to the data, as well as the data itself. 
            # In addition we add a slider-object, that allows us to switch between the different compartements. 
            if self.fit_radiobutton.isChecked(): 
                if any(v is None for v in [self.current_model, self.data_var_time, self.fitted_data]): 
                    return  
                slider.valueChanged.connect(lambda: self.change_chart(slider.value()-1, "fit"))
                self.chart = SingleCanvas(self.frame, comps_to_fit[0], self.data_var_time[comps_to_fit[0]], 
                                        fitted_data=self.fitted_data[:,0], log_scale=log_scale, interventions=self.interventions)
            # If the fit-radiobutton is checked, we want to show only the data, that the user uploaded. 
            # In addition we add a slider-object, that allows us to switch between the different compartements. 
            if self.data_radiobutton.isChecked(): 
                slider.valueChanged.connect(lambda: self.change_chart(slider.value()-1, "data"))
                if any(v is None for v in [self.current_model, self.current_data]): 
                    return
                self.chart = SingleCanvas(self.frame, comps_to_fit[0], self.current_data[comps_to_fit[0]], 
                                                fitted_data=None, log_scale=log_scale)

            self.toolbar = NavigationToolbar(self.chart, self.frame)
            self.framelayout.addWidget(self.toolbar)
            self.framelayout.addWidget(self.chart)
        except: 
            self.show_error_message("Something went wrong!")
            return

    def change_chart(self, value, fit_or_data): 
        
        """This function is a auxiliary function. It is used by the slider-object from "self.show", 
        to allow the user to switch between the different compartements."""

        comps_to_fit = self.current_model["Compartments_to_Fit"]
        
        # Check if we are in "Fit"- or in "Data"-mode
        if fit_or_data == "fit":
            # Check if necessary data is available 
            if any(v is None for v in [self.current_model, self.data_var_time, self.fitted_data]): 
                return
            data = self.data_var_time[comps_to_fit[value]]
            fitted_data = self.fitted_data[:,value]
            interventions = self.interventions
        else: 
            # Check if necessary data is available 
            if any(v is None for v in [self.current_model, self.current_data]): 
                return
            data = self.current_data[comps_to_fit[value]]
            fitted_data = None
            interventions = None
        
        try: 
            # Check if user wants to use log- or linearscale
            log_scale = False
            if self.linear_radiobutton.isChecked(): 
                log_scale = False
            if self.logarithmic_radiobutton.isChecked(): 
                log_scale = True
                    
            self.chart.setParent(None) 
            self.toolbar.setParent(None)
            self.chart= SingleCanvas(self.frame, comps_to_fit[value], data, 
                            fitted_data=fitted_data, log_scale=log_scale, interventions=interventions)
            self.toolbar = NavigationToolbar(self.chart, self.frame)
            self.framelayout.addWidget(self.toolbar)
            self.framelayout.addWidget(self.chart)
        except: 
            return

    def upload_data(self):

        """ This function is used to handle the upload of the data-file in csv-format"""

        data_file_name = QtWidgets.QFileDialog.getOpenFileName(self.upload_tab, 'Open file', 'c:\\',"CSV files (*.csv)")[0]
        if data_file_name == "": 
            return 
        
        try:
            self.read_data_file["start_row"] = int(self.start_row_textfield.value())
            self.read_data_file["end_row"] = int(self.end_row_textfield.value())
            self.read_data_file["population"] = int(self.population_textfield.value())
            for textfield in self.column_textfield_label_list:
                self.read_data_file["Columns"][textfield[0]] = int(textfield[1].value())
            # This function is defined in "fitting_tool_logic.py"
            # It takes a filename and the "self.read_data_file" dictionary and returns
            # a numpy array containing the data used for the fit. 
            self.current_data = Get_Data(data_file_name, self.read_data_file)
        except: 
            self.show_error_message("Something went wrong! Please check your input and your files.")
            return
        
        if self.current_data is not None: 
            self.fitted_data = None
            self.data_var_time = None
            self.interventions = None
            self.upload_data_label.setText(os.path.basename(str(data_file_name)))

    def upload_model(self):
        
        """ This function is used to handle the upload of the model-file in json-format"""

        model_file_name = QtWidgets.QFileDialog.getOpenFileName(self.upload_tab, 'Open file', 'c:\\',"JSON files (*.json)")[0]
        if model_file_name == "": 
            return 
    
        try:
            # This function is defined in fitting_tool_logic.py. 
            # It generates a dictionary which is used to give the fitting-algorithm all
            # the necessary informations about the underlying model. 
            self.current_model = Get_Model(model_file_name)
        except NoSusException: 
            self.show_error_message("Please specify your susceptible compartement.")
            return
        except: 
            self.show_error_message("Something went wrong! Please check your model file.")
            return
        
        # Here we draw the labels and textfields, where the user can enter which column of the data-file
        # corresponds to which compartement. 
        if self.current_model is not None: 
            self.fitted_data = None 
            self.data_var_time = None
            self.interventions = None
            self.upload_model_label.setText(os.path.basename(str(model_file_name)))
            self.read_data_file["Columns"] = {}
            for widgets in self.column_textfield_label_list: 
                widgets[1].setParent(None)
                widgets[2].setParent(None)
            self.column_textfield_label_list = []
            for row, comp in enumerate(self.current_model["Compartments_to_Fit"]): 
                new_label = QtWidgets.QLabel(self.scrollAreaWidgetContents)
                new_label.setObjectName(comp)
                self.gridLayout_2.addWidget(new_label, 6+row, 1, 1, 1) 
                _translate = QtCore.QCoreApplication.translate
                new_label.setText(_translate("MainWindow", comp))
                new_textfield = QtWidgets.QSpinBox(self.scrollAreaWidgetContents)
                sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Maximum)
                sizePolicy.setHorizontalStretch(0)
                sizePolicy.setVerticalStretch(0)
                sizePolicy.setHeightForWidth(new_textfield.sizePolicy().hasHeightForWidth())
                new_textfield.setSizePolicy(sizePolicy)
                new_textfield.setMinimum(1)
                new_textfield.setMaximum(1000000000)
                new_textfield.setObjectName(f"new_textfield{row}")
                self.gridLayout_2.addWidget(new_textfield, 6+row, 4, 1, 1)
                self.column_textfield_label_list.append([comp, new_textfield, new_label])


    """The remaining functions (except from "retranslateUi") are used to generate and download our custom data-file."""
    #This function adds the columns to the data-file.
    def add_column(self):
        
        column_file_name = QtWidgets.QFileDialog.getOpenFileName(self.edit_tab, 'Open file', 'c:\\',"CSV files (*.csv)")[0]
        column_name = str(self.name_column_lineEdit.text())
        if column_file_name == "": 
            return
        
        #Check if the column name hasn't been used already. 
        if column_name in self.custom_data_file_dict.keys(): 
            self.show_error_message(f"There is already a column named {column_name}.")
            return

        try: 
            #Read a column from a csv-file and store it in "csv_input". 
            csv_input = pd.read_csv(column_file_name, delimiter=',', 
                            usecols=(int(self.column_or_row_spinBox.value())-1,), skiprows=int(self.start_add_column_spinBox.value()), 
                            nrows=int(self.step_add_column_spinBox.value()))
        except: 
            self.show_error_message("Something went wrong!")
            return

        self.custom_data_file[column_name] = csv_input
        self.draw_custom_data_file_columns(column_name)
    #Every time this function is called a label and a button will be drawn onto the right side of the GUI.
    #If the user clicks the button the corresponding column (specified through the label) will be deleted from the custom data-file. 
    def draw_custom_data_file_columns(self, column_name):
         
        new_column_frame = QtWidgets.QFrame(self.frame)
        self.framelayout.addWidget(new_column_frame)
        new_column_frame_layout = QtWidgets.QGridLayout()
        new_column_frame.setLayout(new_column_frame_layout)
    
        new_column_label = QtWidgets.QLabel(new_column_frame)
        new_column_frame_layout.addWidget(new_column_label, 0,0)

        new_column_button = QtWidgets.QPushButton(new_column_frame)
        new_column_button.setText("Delete")
        new_column_frame_layout.addWidget(new_column_button, 0,1)
        new_column_button.clicked.connect(lambda: self.delete_column(column_name))
        
        new_column_label.setText(column_name)
        self.custom_data_file_dict[column_name] = [new_column_frame, new_column_label, new_column_button]
    #This function is used to download the data-file into a custom directory.
    def download_custom_file(self):
        directory_to_save = QtWidgets.QFileDialog.getSaveFileName(self.edit_tab, 'Save file', 'c:\\' ,'CSV files (*.csv)')[0]
        if directory_to_save == "":
            return         
        #Nan-Values will be replaced by 0. 
        self.custom_data_file.fillna(0)
        self.custom_data_file.to_csv(directory_to_save, index=False)
    #This function is used to delete one column at a time. 
    def delete_column(self, column_name): 
        self.custom_data_file_dict[column_name][0].setParent(None)
        self.custom_data_file_dict.pop(column_name)
        self.custom_data_file.pop(column_name)
        
    # Autogenerated by the QtDesigner. 
    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.row_population_label.setText(_translate("MainWindow", "Rows/Population: "))
        self.columns_label.setText(_translate("MainWindow", "Columns: "))
        self.start_row_label.setText(_translate("MainWindow", "start row"))
        self.end_row_label.setText(_translate("MainWindow", "end row"))
        self.population_label.setText(_translate("MainWindow", "population"))
        self.show_header_checkBox.setText(_translate("MainWindow", "Show Header"))
        self.upload_data_button.setText(_translate("MainWindow", "Upload Data"))
        self.upload_model_button.setText(_translate("MainWindow", "Upload Model"))
        self.tabs.setTabText(self.tabs.indexOf(self.upload_tab), _translate("MainWindow", "Upload"))
        self.step_label.setText(_translate("MainWindow", "step"))
        self.start_label.setText(_translate("MainWindow", "start"))
        self.show_button.setText(_translate("MainWindow", "Show"))
        self.fit_button.setText(_translate("MainWindow", "Fit"))
        self.statistic_radiobutton.setText(_translate("MainWindow", "Statistic"))
        self.fit_radiobutton.setText(_translate("MainWindow", "Fit"))
        self.data_radiobutton.setText(_translate("MainWindow", "Data"))
        self.tabs.setTabText(self.tabs.indexOf(self.fitting_tab), _translate("MainWindow", "Fitting"))
        self.upper_bound_label.setText(_translate("MainWindow", "Upper-Bound"))
        self.fittingalg_label.setText(_translate("MainWindow", "Fitting-Algorithm"))
        self.scale_label.setText(_translate("MainWindow", "Scale"))
        self.logarithmic_radiobutton.setText(_translate("MainWindow", "logarithmic"))
        self.fittingalgs_comboBox.setItemText(0, _translate("MainWindow", "leastsq"))
        self.fittingalgs_comboBox.setItemText(1, _translate("MainWindow", "least_squares"))
        self.fittingalgs_comboBox.setItemText(2, _translate("MainWindow", "differential_evolution"))
        self.fittingalgs_comboBox.setItemText(3, _translate("MainWindow", "brute"))
        self.fittingalgs_comboBox.setItemText(4, _translate("MainWindow", "basinhopping"))
        self.fittingalgs_comboBox.setItemText(5, _translate("MainWindow", "ampgo"))
        self.fittingalgs_comboBox.setItemText(6, _translate("MainWindow", "nelder"))
        self.fittingalgs_comboBox.setItemText(7, _translate("MainWindow", "lbfgsb"))
        self.fittingalgs_comboBox.setItemText(8, _translate("MainWindow", "powell"))
        self.fittingalgs_comboBox.setItemText(9, _translate("MainWindow", "cg"))
        self.fittingalgs_comboBox.setItemText(10, _translate("MainWindow", "newton"))
        self.fittingalgs_comboBox.setItemText(11, _translate("MainWindow", "cobyla"))
        self.fittingalgs_comboBox.setItemText(12, _translate("MainWindow", "bfgs"))
        self.fittingalgs_comboBox.setItemText(13, _translate("MainWindow", "tnc"))
        self.fittingalgs_comboBox.setItemText(14, _translate("MainWindow", "trust-ncg"))
        self.fittingalgs_comboBox.setItemText(15, _translate("MainWindow", "trust-exact"))
        self.fittingalgs_comboBox.setItemText(16, _translate("MainWindow", "trust-krylov"))
        self.fittingalgs_comboBox.setItemText(17, _translate("MainWindow", "trust-constr"))
        self.fittingalgs_comboBox.setItemText(18, _translate("MainWindow", "dogleg"))
        self.fittingalgs_comboBox.setItemText(19, _translate("MainWindow", "slsqp"))
        self.fittingalgs_comboBox.setItemText(20, _translate("MainWindow", "emcee"))
        self.fittingalgs_comboBox.setItemText(21, _translate("MainWindow", "shgo"))
        self.fittingalgs_comboBox.setItemText(22, _translate("MainWindow", "dual_annealing"))
        self.linear_radiobutton.setText(_translate("MainWindow", "linear"))
        self.attempts_label.setText(_translate("MainWindow", "Attempt(s)"))
        self.interventions_label.setText(_translate("MainWindow", "Intervention(s)"))
        self.fitting_label.setText(_translate("MainWindow", "Fitting"))
        self.maxEvals_label.setText(_translate("MainWindow", " Max Evals"))
        self.lower_bound_label.setText(_translate("MainWindow", "Lower-Bound"))
        self.gen_set_label.setText(_translate("MainWindow", "General Settings"))
        self.tabs.setTabText(self.tabs.indexOf(self.settings_tab), _translate("MainWindow", "Settings"))
        self.column_or_row_comboBox.setItemText(0, _translate("MainWindow", "column"))
        self.column_or_row_comboBox.setItemText(1, _translate("MainWindow", "row"))
        self.add_column_button.setText(_translate("MainWindow", "Add Column"))
        self.start_add_column_label.setText(_translate("MainWindow", "start"))
        self.step_add_column_label.setText(_translate("MainWindow", "step"))
        self.name_column_label.setText(_translate("MainWindow", "name"))
        self.download_button.setText(_translate("MainWindow", "Download"))
        self.tabs.setTabText(self.tabs.indexOf(self.edit_tab), _translate("MainWindow", "Edit"))


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    ui.threadpool.releaseThread()
    sys.exit(app.exec_())
    
